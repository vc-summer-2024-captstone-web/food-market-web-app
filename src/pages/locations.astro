---
import AltLayout from '@layouts/AltLayout.astro';
import { locations } from '../data/locations.ts';
---

<AltLayout title='NourishMap | Locations'>
  <main>
    <div class='search-container'>
      <input type='text' placeholder='Find a participating store' />
      <button>Filter</button>
    </div>

    <section class='map-container'>
      <div class='column'>
        <div id='map'></div>
      </div>

      <div class='column'>
        <div class='locations-list'>
          {
            locations.map((location) => (
              <div class='location'>
                <h2>{location.storeType}</h2>
                <p>{location.distance}</p>
                <p>Open Hours: {location.openHours}</p>
                <p>{location.address}</p>
                <button style='background-color: #FFD700;'>Details</button>
              </div>
            ))
          }
        </div>
      </div>
    </section>
  </main>
</AltLayout>

<style lang='scss'>
  @use '../styles/mixins';
  .search-container {
    display: flex;
    justify-content: center;
    margin: 20px 0;
    input {
      padding: 10px;
      width: 300px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      padding: 10px;
      margin-left: 10px;
      border: none;
      background-color: #007bff;
      color: #fff;
      cursor: pointer;
      border-radius: 4px;
    }
  }

  #map {
    width: 100%;
    height: 100%;
    border-radius: 10px;
    position: relative;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }

  .map-container {
    background-color: #1b1b1b;
    display: flex;
    height: 100%;

    flex-direction: column;
    @include mixins.breakpoint-min(md) {
      flex-direction: row;
      max-height: 800px;
    }
  }
  .column {
    padding: 20px;
    &:first-child {
      border-right: 1px solid #444;
      height: 500px;
    }
    @include mixins.breakpoint-min(md) {
      flex: 1;
      &:first-child {
        height: auto;
      }
    }
  }

  .locations-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #cecccc;
    border-radius: 10px;
    height: 100%;
    overflow-y: scroll;
  }

  .location {
    background-color: #fff;
    padding: 20px;
    margin: 10px 0;
    width: 80%;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
  }

  .button {
    border-radius: 10px;
  }
</style>

<script>
  import { Map, View } from 'ol';
  import TileLayer from 'ol/layer/Tile';
  import VectorLayer from 'ol/layer/Vector';
  import TileJSON from 'ol/source/TileJSON';
  import VectorSource from 'ol/source/Vector';
  import Point from 'ol/geom/Point';
  import Feature from 'ol/Feature';
  import Icon from 'ol/style/Icon';
  import Style from 'ol/style/Style';
  import { fromLonLat } from 'ol/proj';
  import Attribution from 'ol/control/Attribution';
  import { defaults as defaultControls } from 'ol/control';
  const { PUBLIC_OPEN_LAYER_KEY } = import.meta.env;
  const attribution = new Attribution({
    collapsible: false,
  });
  const map = new Map({
    layers: [
      new TileLayer({
        source: new TileJSON({
          url: `https://api.maptiler.com/maps/streets-v2/tiles.json?key=${PUBLIC_OPEN_LAYER_KEY}`,
          tileSize: 512,
          crossOrigin: 'anonymous',
        }),
      }),
    ],
    controls: defaultControls({ attribution: false }).extend([attribution]),
    target: 'map',
    view: new View({
      constrainResolution: true,
      center: fromLonLat([-81.379234, 28.538336]),
      zoom: 15,
    }),
  });

  const addLocations = async () => {
    try {
      const locationsResponse = await fetch('/api/locations', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!locationsResponse.ok) {
        return new Error(`HTTP error! Status: ${locationsResponse.status}`);
      }

      const markets = await locationsResponse.json();

      if (markets.length === 0) {
        console.warn('No markets found');
        return;
      }

      const features = markets.map((market: any) => {
        const { long, lat } = market;
        console.log(`Market coordinates: longitude=${long}, latitude=${lat}`);
        return new Feature({
          geometry: new Point(fromLonLat([long, lat])),
        });
      });

      const layer = new VectorLayer({
        source: new VectorSource({
          features,
        }),
        style: new Style({
          image: new Icon({
            anchor: [0.5, 1],
            crossOrigin: 'anonymous',
            src: '/images/marker-icon.png',
          }),
        }),
      });
      map.addLayer(layer);
    } catch (error) {
      console.error('Error fetching and processing locations:', error);
    }
  };

  addLocations();
</script>
